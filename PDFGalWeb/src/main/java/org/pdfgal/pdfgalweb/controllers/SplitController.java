package org.pdfgal.pdfgalweb.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.pdfgal.pdfgal.pdfgal.PDFGal;
import org.pdfgal.pdfgalweb.forms.SplitForm;
import org.pdfgal.pdfgalweb.model.enumerated.SplitMode;
import org.pdfgal.pdfgalweb.utils.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/split")
public class SplitController extends BaseController {

	private static final long serialVersionUID = 2062284077983922984L;

	private static final String SPLIT_FORM = "splitForm";

	@Autowired
	private FileUtils fileUtils;

	@Autowired
	private PDFGal pdfGal;

	/**
	 * Start Page for splitting.
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping(method = RequestMethod.GET)
	public final ModelAndView getInicioPage() {
		final ModelAndView mav = new ModelAndView("split");
		mav.addObject(SPLIT_FORM, new SplitForm());
		mav.addObject("splitModes", SplitMode.values());
		return mav;
	}

	@RequestMapping(method = RequestMethod.POST)
	public final ModelAndView protect(@ModelAttribute(SPLIT_FORM) final SplitForm splitForm,
			final HttpServletResponse response) {

		final MultipartFile file = splitForm.getFile();
		final SplitMode splitMode = splitForm.getSplitMode();
		final String pages = splitForm.getPages();

		if (!file.isEmpty() && splitMode != null && StringUtils.isNotEmpty(pages)) {

			final String originalName = file.getOriginalFilename();
			final String inputUri = this.fileUtils.saveFile(file);
			final String outputUri = this.fileUtils.getAutogeneratedName(originalName);
			List<String> outputUris = new ArrayList<String>();

			try {

				if (splitMode.equals(SplitMode.NUMBER_OF_PAGES)) {
					outputUris = this.splitNumberOfPages(file, pages, inputUri, outputUri);

				} else if (splitMode.equals(SplitMode.CONCRETE_PAGES_TO_SPLIT)) {
					outputUris = this.splitConcretePages(file, pages, inputUri, outputUri);

				}

				// If everything is OK, created files are prepared for download
				this.fileUtils.prepareFileDownload(response, outputUris, originalName);

				// Temporal files are deleted from system
				this.fileUtils.delete(outputUris);

			} catch (final Exception e) {

				// TODO

			} finally {
				// Temporal files are deleted from system
				this.fileUtils.delete(inputUri);
			}

		} else {
			// TODO
			return this.getInicioPage();
		}

		return null;
	}

	/**
	 * This method splits the file, having each one of the new files the number
	 * of pages (except the last one).
	 * 
	 * @param file
	 * @param pages
	 * @return The list of URIs where files are saved.
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws COSVisitorException
	 */
	private List<String> splitNumberOfPages(final MultipartFile file, final String pages,
			final String inputUri, final String outputUri) throws NumberFormatException,
			COSVisitorException, IOException {

		final Integer pagesInteger = Integer.parseInt(pages);

		// File is splitted
		return this.pdfGal.split(inputUri, outputUri, pagesInteger);
	}

	/**
	 * This method splits the file, each new file will start at each one of the
	 * pages.
	 * 
	 * @param file
	 * @param pages
	 * @return The list of URIs where files are saved.
	 * @throws NumberFormatException
	 * @throws IOException
	 * @throws COSVisitorException
	 */
	private List<String> splitConcretePages(final MultipartFile file, final String pages,
			final String inputUri, final String outputUri) throws NumberFormatException,
			COSVisitorException, IOException {

		final List<Integer> pagesList = new ArrayList<Integer>();

		final StringTokenizer stringTokenizer = new StringTokenizer(pages, ",");

		while (stringTokenizer.hasMoreElements()) {
			pagesList.add(Integer.parseInt((String) stringTokenizer.nextElement()));
		}

		// File is splitted
		return this.pdfGal.split(inputUri, outputUri, pagesList);
	}
}
