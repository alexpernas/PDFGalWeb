package org.pdfgal.pdfgalweb.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.pdfgal.pdfgal.pdfgal.PDFGal;
import org.pdfgal.pdfgalweb.forms.MergeForm;
import org.pdfgal.pdfgalweb.utils.FileUtils;
import org.pdfgal.pdfgalweb.utils.ZipUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/merge")
public class MergeController extends BaseController {

	private static final long serialVersionUID = -7355124251927717885L;

	private static final String MERGE_FORM = "mergeForm";

	@Autowired
	private FileUtils fileUtils;

	@Autowired
	private PDFGal pdfGal;

	@Autowired
	private ZipUtils zipUtils;

	/**
	 * Start Page for merging.
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping(method = RequestMethod.GET)
	public final ModelAndView getInicioPage() {
		final ModelAndView mav = new ModelAndView("merge");
		mav.addObject(MERGE_FORM, new MergeForm());
		return mav;
	}

	@RequestMapping(method = RequestMethod.POST)
	public final ModelAndView protect(
			@ModelAttribute(MERGE_FORM) final MergeForm mergeForm,
			final HttpServletResponse response) {

		final List<MultipartFile> files = mergeForm.getFiles();
		final String fileName = mergeForm.getFileName();

		if (CollectionUtils.isNotEmpty(files)
				&& StringUtils.isNotBlank(fileName)) {

			List<String> inputUris = new ArrayList<String>();
			final String outputUri = this.fileUtils
					.getAutogeneratedName(fileName);

			if (files.size() == 1) {
				// It's a ZIP file
				try {
					inputUris = this.zipUtils.saveFilesFromZip(files.get(0)
							.getInputStream());
				} catch (final IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			} else {
				// They are PDF files
				inputUris = this.fileUtils.saveFile(files);
			}

			try {
				// Merge documents
				this.pdfGal.merge(inputUris, outputUri);

				// File is prepared for download
				this.fileUtils.prepareFileDownload(response, outputUri,
						fileName);

			} catch (COSVisitorException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				this.fileUtils.delete(inputUris);
				this.fileUtils.delete(outputUri);
			}

		} else {
			// TODO
		}

		// TODO

		return null;
	}
}
