package org.pdfgal.pdfgalweb.controllers;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.pdfgal.pdfgal.pdfgal.PDFGal;
import org.pdfgal.pdfgalweb.utils.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/unprotect")
public class UnProtectController extends BaseController {

	private static final long serialVersionUID = 8795712832938321649L;

	@Autowired
	private FileUtils fileUtils;

	@Autowired
	private PDFGal pdfGal;

	/**
	 * Start Page for unprotecting.
	 * 
	 * @return ModelAndView
	 */
	@RequestMapping(method = RequestMethod.GET)
	public final ModelAndView getInicioPage() {
		final ModelAndView mav = new ModelAndView("unprotect");
		return mav;
	}

	@RequestMapping(method = RequestMethod.POST)
	public final ModelAndView unProtect(
			@RequestParam("file") final MultipartFile file,
			@RequestParam("password") final String password,
			final HttpServletResponse response) {

		if (!file.isEmpty() && StringUtils.isNotBlank(password)) {
			try {
				final String originalName = file.getOriginalFilename();
				final String inputUri = this.fileUtils.saveFile(file);
				final String outputUri = this.fileUtils
						.getAutogeneratedName(originalName);

				// File is unprotected
				this.pdfGal.unProtect(inputUri, outputUri, password);

				// The unprotected file is prepared for download
				this.fileUtils.prepareFileDownload(response, outputUri,
						originalName);

				// Temporal files are deleted from system
				this.fileUtils.delete(inputUri);
				this.fileUtils.delete(outputUri);

			} catch (final Exception e) {
				// TODO Facer que amose mensaxe de erro en caso de que non se
				// cargara ning�n ficheiro, ou non se protexera, ou o que sexa
				// (un catch para cada cousa) e incluir no log.
				return this.getInicioPage();
			}
		} else {
			// TODO Facer que amose mensaxe de erro en caso de que non se
			// cargara ning�n ficheiro, ou alg�n contrasinal � baleiro, ou alg�n
			// contrasinal non existe.
			return this.getInicioPage();
		}

		return null;
	}
}
